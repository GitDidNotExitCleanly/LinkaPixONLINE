<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="">
  <meta name="author" content="">

  <title>Linkapix Test</title>

  <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" rel="stylesheet">
  <link href="/stylesheets/linkapix.css" rel="stylesheet">
</head>

<body>
  <div class="container">

    <div class="navbar navbar-default" role="navigation">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="#">Linkapix</a>
      </div>
      <div class="navbar-collapse collapse">
        <ul class="nav navbar-nav">
          <li class="active"><a href="#">Link</a></li>
          <li><a href="#">Link</a></li>
          <li><a href="#">Link</a></li>
        </ul>
        <ul class="nav navbar-nav navbar-right">
          <li><a href="./">Hello </a></li>
        </ul>
      </div><!--/.nav-collapse -->
    </div>

    <!-- Main component for a primary marketing message or call to action -->
    <div class="jumbotron">
      <h1>Linkapix</h1>
      <p class="load">
        <button type="button" class="btn btn-lg btn-primary load_puzzle">Load Puzzle</button>
      </p>
      <p class="uploader">
    Width: <input type="number" name="width" id="width" value="30"><br>
    Height: <input type="number" name="height" id="height" value="30"><br>
    Difficulty: <select name="difficulty" id="difficulty">
    <option value="5">Easy</option>
    <option value="7">Medium</option>
    <option value="10">Difficult</option>
  </select>
    <input class="joint upld" type='file' id="imgInp">
</p>
    <a href="/" type="button" class="btn btn-lg btn-primary new_puzzle" style="display: none;">New Puzzle</a>


      <!--
      <p>
      <button id="launch_test" class="btn btn-lg btn-primary">Launch game!</button>
      </p>
    -->
    </div>

    <div class="row">
      <div class="col-md-6 centered">
      <div class="progress progress-striped active" style="display: none;">
  <div class="progress-bar progress-bar-info" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 10%; transition:none;">
  </div>
</div>
</div>
    </div>

    <div class="row">

      <div class="col-md-10 centered linkapix">
      </div>

    </div>

    <div class="row">
      <div class="md-col-12">
        <div class="jumbotron">
            <button type="button" class="btn btn-lg btn-primary save_puzzle" style="display: none;">Save Puzzle</button>
            <button type="button" class="btn btn-lg btn-primary solve_puzzle">Solve Puzzle</button>

          </div>
      </div>
    </div>

  </div>



  <script src="http://codeorigin.jquery.com/jquery-1.10.2.min.js"></script>
  <script src="http://netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js"></script>
  <script src="/javascripts/linkapix.js"></script>

  <script>

  function analyse_puzzle(src, callback) {
      //var canvas = document.getElementById('myCanvas');
      //var ctx = canvas.getContext('2d');
      var imageObj = new Image();
      imageObj.src = src;

      imageObj.onload = function() {
        $('<canvas>').attr({
            id: 'myCanvas',
            width: this.width,
            height: this.height
        }).appendTo('.jumbotron').hide();

        var canvas = document.getElementById('myCanvas');
        var ctx = canvas.getContext('2d');

         ctx.drawImage(imageObj, 0, 0);

         console.log(parseInt($('#width').val()));

            var width = parseInt($('#width').val()); // User specified
            var height = parseInt($('#height').val()); // User specified
            
            var blockWidth = Math.round(canvas.width / width);
            var blockHeight = Math.round(canvas.height / height);

            var pixArray = new Array(height);
            for (var m = 0; m < pixArray.length; m++) {
                pixArray[m] = new Array(width);
            }
            
            var white = [255, 255, 255];
            var black = [0, 0, 0];

            for (i = 0; i < height; i++) {
                for (j = 0; j < width; j++) {
                    var imgData = ctx.getImageData(j * blockWidth + blockWidth / 2, i * blockHeight + blockHeight / 2, 1, 1);
                    
                    disWhite = (white[0] - imgData.data[0]) + (white[1] - imgData.data[1]) + (white[2] - imgData.data[2]);
                    disBlack = (imgData.data[0] - black[0]) + (imgData.data[1] - black[1]) + (imgData.data[2] - black[2]);
                    if (disWhite < 10) {
                        pixArray[i][j] = { number: 0, color: {r: 255, g: 255, b: 255} };
                    } else if (disBlack < 10) {
                        pixArray[i][j] = { number: 1, color: {r: 255, g: 255, b: 255} };
                    } else {
                        pixArray[i][j] = { number: 1, color: {r: 255, g: 255, b: 255} };
                    }
                }
            }
            console.log(pixArray);
            callback(pixArray);
        };
        return data;
    };

    function readFile(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                var image = new Image();
                image.src = e.target.result;
                analyse_puzzle(e.target.result, function(pixArray) {
                    var postdata = new Object;
                    postdata.width = $('#width').val();
                    postdata.height = $('#height').val();
                    postdata.difficulty = $('#difficulty').val();
                    postdata.data = JSON.stringify(pixArray);
                    console.log(postdata);
                    $('.progress').show(400);
                    $('.progress-bar').animate({width: "90%"}, 20000);
                    $.ajax({
                        type: "POST",
                        url: '/generate',
                        data: postdata,
                        success: function(result) {
                            $('.progress-bar').stop();
                            $('.progress-bar').css({width: "100%"});
                            $('.progress').hide(400);
                            destroy_puzzle();
                            console.log(result.puzzledata);
                            puzzle = string_to_puzzle(result.puzzledata);
                            build_puzzle(puzzle);
                            $('.uploader').hide(400)
                            $('.new_puzzle').show(400);
                            $('.save_puzzle').show(400);
                        }
                    })
                });
            };
            reader.readAsDataURL(input.files[0]);
        };
    };

    $(".upld").change(function () {
        readFile(this);
    });

function saveGameState() {
    localStorage["linkapix.test"] = $('.linkapix').html();
    return true;
}

function loadGameState() {
    $('.linkapix').html(localStorage["linkapix.test"]);
    return true;
}

    $(".save_puzzle").on('click', function() {
        saveGameState();
        return false;
    });

    $(".load_puzzle").on('click', function() {
        loadGameState();
        register_game_events();
        $('.save_puzzle').show(400)
        return false;
    });

    $(".solve_puzzle").on('click', function() {
      var postdata = new Object;
      postdata.width = $('#width').val();
      postdata.height = $('#height').val();
      //postdata.difficulty = $('#difficulty').val();
      //postdata.data = JSON.stringify(pixArray);
      console.log(postdata);
      $.ajax({
          type: "POST",
          url: '/solve',
          data: postdata,
          success: function(result) {
                                        puzzle = string_to_puzzle(result.solved);
                            build_puzzle(puzzle);
              console.log(result.solved);
          }
      })
    });

    /*destroy_puzzle();
    puzzle = string_to_puzzle('{{{ puzzledata }}}');
    build_puzzle(puzzle);*/
  </script>
</body>
</html>